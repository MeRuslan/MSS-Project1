//
// 17-651: FSP model of a simple infusion pump
//
// ASSUMPTIONS
// - The user can choose, in the setup phase, which item of info to enter next.
// - The simple enter_value action is a simple number pad where the user enters
//   numeric values.
// - There exist 'set' and 'cancel' buttons, which are the targets of press_set
//   and press_cancel.
// - When the user turns the unit off, the unit will be in a state as if it was
//   just plugged in.
//

//
// Set of actions that the user of the LTSA tool can control in an
// animation of this model.
//
menu UserControlMenu = {
    change_settings, clear_rate, confirm_settings, connect_set,
    dispense_main_med_flow, enter_value, erase_and_unlock_line,
    flow_unblocked, sound_alarm, lock_unit, plug_in, press_cancel, 
    press_set, set_rate, silence_alarm, turn_off, unlock_unit, unplug,
    flow_blocked, sleep_timer_went_off, key_pressed, 
    electricity_on, electricity_off
}

//======================
// Constants and Ranges
//======================

//
// States of the pump alarm
//
const AlarmActivated = 0    // Alarm currently active
const AlarmSilenced  = 1    // Alarm currently inactive

range AlarmStateT = AlarmActivated .. AlarmSilenced

//
// States of the pump settings
//
const ParamsNotSet = 2    // pump parameters not set yet
const ParamsSet    = 3    // pump parameters already set

range ParamsStateT = ParamsNotSet .. ParamsSet

//
// Locked/unlocked states of a line with respect to a pump channel
//
const LineUnlocked = 4  // line not locked into a pump channel 
const LineLocked   = 5  // line locked into a pump channel

range LineLockStateT = LineUnlocked .. LineLocked

//
// Locked/unlocked states of the pump unit
//
const UnitUnlocked = 6  // the keypad of the pump is not locked
const UnitLocked   = 7  // the keypad of the pump is locked

range UnitLockStateT = UnitUnlocked .. UnitLocked

//
// States of the power source (whether battery powered by battery or grid)
//
const PoweredByBattery = 8      // pump powered by battery
const NotPoweredByBattery = 9   // pump powered by external power line
const LowBatteryLife = 10       // pump powered by external power line

range BatteryStateT = PoweredByBattery .. LowBatteryLife

//=====================
// Process Definitions
//=====================

PUMP = UNPLUGGED,

UNPLUGGED =
(
    plug_in -> POWER_OFF
),

POWER_OFF = 
(
    turn_on -> SETUP[ParamsNotSet][LineUnlocked]
),

//
// Pump in setup mode:
// - Once required pump parameters (just rate in this case) are set,
//   physical connections can be made and line can be locked
//
SETUP[params:ParamsStateT][lineLock:LineLockStateT] = 
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (params == ParamsNotSet && lineLock == LineUnlocked)
        set_rate -> 
			(enter_value ->
            	(press_set -> SETUP[ParamsSet][lineLock]
             	|
             	press_cancel -> SETUP[ParamsNotSet][lineLock]
			 	|
			 	sleep_timer_went_off -> SLEEP_MODE[params][lineLock])
			 |
			 sleep_timer_went_off -> SLEEP_MODE[params][lineLock])
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        clear_rate -> SETUP[ParamsNotSet][lineLock]
    |
    when (params == ParamsSet && lineLock == LineUnlocked)
        connect_set -> purge_air -> lock_line -> SETUP[params][LineLocked]
    |
    when (lineLock == LineLocked)
        confirm_settings -> INFUSION[UnitUnlocked][NotPoweredByBattery]
    |
    when (lineLock == LineLocked)
        erase_and_unlock_line -> SETUP[params][LineUnlocked]
	|
	set_sleep_timer -> SETUP[params][LineUnlocked]
	|
	sleep_timer_went_off -> SLEEP_MODE[params][lineLock]
),

//
// Pump in infusion mode:
// - Always be able to turn the unit off, even if locked
// - Allow the user to lock/unlock the unit
// - Errors could occur with the pump (e.g., line became pinched or plugged)
// - Settings can be changed only when pump is powered by grid (not battery)
//
INFUSION[unitLock:UnitLockStateT][battery:BatteryStateT] =
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (unitLock == UnitUnlocked && battery == NotPoweredByBattery)
        change_settings -> SETUP[ParamsSet][LineLocked]
    |
    when (unitLock == UnitUnlocked)
        lock_unit -> INFUSION[UnitLocked][battery]
    |
    when (unitLock == UnitLocked)
        unlock_unit -> INFUSION[UnitUnlocked][battery]
    |
    dispense_main_med_flow -> INFUSION[unitLock][battery]
    |
    when (battery == PoweredByBattery)
        electricity_on -> INFUSION[unitLock][NotPoweredByBattery]
    |
    when (battery == NotPoweredByBattery)
        electricity_off -> notify_visually -> INFUSION[UnitUnlocked][PoweredByBattery]
    |
    when (battery == PoweredByBattery)
        battery_low -> BATTERY_ALARM[unitLock]
    |
    flow_blocked -> sound_alarm -> INFUSION_BLOCKED[unitLock][AlarmActivated][battery]
),

//
// Pump battery is too low for operating pump (occurs only when powered by battery)
//
BATTERY_ALARM[unitLock:UnitLockStateT] =
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    electricity_on -> INFUSION[unitLock][NotPoweredByBattery]
    |
    sound_alarm -> BATTERY_ALARM[unitLock]
),

//
// Pump stuck (medication flow suspended)
//
INFUSION_BLOCKED[unitLock:UnitLockStateT][alarm:AlarmStateT][battery:BatteryStateT] =
(
    unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
    when (alarm == AlarmActivated)
        sound_alarm -> INFUSION_BLOCKED[unitLock][alarm][battery]
    |
    when (alarm == AlarmActivated)
        silence_alarm -> INFUSION_BLOCKED[unitLock][AlarmSilenced][battery]
    |
    flow_unblocked -> INFUSION[unitLock][battery]
),

//
// Pump sleep (no key was pressed long time)
//
SLEEP_MODE[params:ParamsStateT][lineLock:LineLockStateT] = 
(
	unplug -> UNPLUGGED
    |
    turn_off -> POWER_OFF
    |
	key_pressed -> SETUP[params][lineLock]
).
